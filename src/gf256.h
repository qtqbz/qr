#ifndef GF256_H
#define GF256_H

#include <stdint.h>

#define MAX_POLYNOM_DEGREE 123 // = max data codewords per block
#define MAX_GENERATOR_POLYNOM_DEGREE 30 // = max error correction codewords per block

static const uint8_t GENERATOR_POLYNOM[MAX_GENERATOR_POLYNOM_DEGREE + 1][MAX_GENERATOR_POLYNOM_DEGREE + 1] = {
    {  1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,   3,   2,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,   7,  14,   8,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  15,  54, 120,  64,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  31, 198,  63, 147, 116,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  63,   1, 218,  32, 227,  38,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 127, 122, 154, 164,  11,  68, 117,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 255,  11,  81,  54, 239, 173, 200,  24,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 226, 207, 158, 245, 235, 164, 232, 197,  37,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 216, 194, 159, 111, 199,  94,  95, 113, 157, 193,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 172, 130, 163,  50, 123, 219, 162, 248, 144, 116, 160,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  68, 119,  67, 118, 220,  31,   7,  84,  92, 127, 213,  97,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 137,  73, 227,  17, 177,  17,  52,  13,  46,  43,  83, 132, 120,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  14,  54, 114,  70, 174, 151,  43, 158, 195, 127, 166, 210, 234, 163,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  29, 196, 111, 163, 112,  74,  10, 105, 105, 139, 132, 151,  32, 134,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  59,  13, 104, 189,  68, 209,  30,   8, 163,  65,  41, 229,  98,  50,  36,  59,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 119,  66,  83, 120, 119,  22, 197,  83, 249,  41, 143, 134,  85,  53, 125,  99,  79,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 239, 251, 183, 113, 149, 175, 199, 215, 240, 220,  73,  82, 173,  75,  32,  67, 217, 146,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 194,   8,  26, 146,  20, 223, 187, 152,  85, 115, 238, 133, 146, 109, 173, 138,  33, 172, 179,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 152, 185, 240,   5, 111,  99,   6, 220, 112, 150,  69,  36, 187,  22, 228, 198, 121, 121, 165, 174,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  44, 243,  13, 131,  49, 132, 194,  67, 214,  28,  89, 124,  82, 158, 244,  37, 236, 142,  82, 255,  89,   0,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1,  89, 179, 131, 176, 182, 244,  19, 189,  69,  40,  28, 137,  29, 123,  67, 253,  86, 218, 230,  26, 145, 245,   0,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 179,  68, 154, 163, 140, 136, 190, 152,  25,  85,  19,   3, 196,  27, 113, 198,  18, 130,   2, 120,  93,  41,  71,   0,   0,   0,   0,   0,   0,   0, },
    {  1, 122, 118, 169,  70, 178, 237, 216, 102, 115, 150, 229,  73, 130,  72,  61,  43, 206,   1, 237, 247, 127, 217, 144, 117,   0,   0,   0,   0,   0,   0, },
    {  1, 245,  49, 228,  53, 215,   6, 205, 210,  38,  82,  56,  80,  97, 139,  81, 134, 126, 168,  98, 226, 125,  23, 171, 173, 193,   0,   0,   0,   0,   0, },
    {  1, 246,  51, 183,   4, 136,  98, 199, 152,  77,  56, 206,  24, 145,  40, 209, 117, 233,  42, 135,  68,  70, 144, 146,  77,  43,  94,   0,   0,   0,   0, },
    {  1, 240,  61,  29, 145, 144, 117, 150,  48,  58, 139,  94, 134, 193, 105,  33, 169, 202, 102, 123, 113, 195,  25, 213,   6, 152, 164, 217,   0,   0,   0, },
    {  1, 252,   9,  28,  13,  18, 251, 208, 150, 103, 174, 100,  41, 167,  12, 247,  56, 117, 119, 233, 127, 181, 100, 121, 147, 176,  74,  58, 197,   0,   0, },
    {  1, 228, 193, 196,  48, 170,  86,  80, 217,  54, 143,  79,  32,  88, 255,  87,  24,  15, 251,  85,  82, 201,  58, 112, 191, 153, 108, 132, 143, 170,   0, },
    {  1, 212, 246,  77,  73, 195, 192,  75,  98,   5,  70, 103, 177,  22, 217, 138,  51, 181, 246,  72,  25,  18,  46, 228,  74, 216, 195,  11, 106, 130, 150, },
};

uint8_t gf256_multiply(uint8_t a, uint8_t b);
uint8_t gf256_divide(uint8_t a, uint8_t b);
int32_t gf256_polynom_divide(uint8_t *poly,
                             int32_t polynomLen,
                             uint8_t *divisor,
                             int32_t divisorLen,
                             uint8_t *remainder);

#endif //GF256_H
